// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id                  Int          @id @default(autoincrement())
  idusuario           String       @unique
  estado              admin_estado? @default(activo)
  fecha_creacion      DateTime     @default(now())
  fecha_actualizacion DateTime     @updatedAt // <-- CORRECCIÓN
}

model maestro {
  id                  Int                       @id @default(autoincrement())
  idusuario           String?                   @unique
  nombre              String
  apellido            String
  documento_identidad String                    @unique
  fecha_de_nacimiento DateTime?
  genero              genero?
  telefono_movil      String
  email               String                    @unique
  tipo_profesional    maestros_tipo_profesional
  estado              maestros_estado?          @default(activo)
  fecha_ingreso       DateTime?
  fecha_creacion      DateTime                  @default(now())
  fecha_actualizacion DateTime                  @updatedAt // <-- CORRECCIÓN
  materias            Materia[]
  alumnosAsignados    alumno[]                  @relation("TerapeutaPrincipal")
  reportesGenerados   Reporte[]
}

model padre {
  id                  Int                   @id @default(autoincrement())
  idusuario           String?               @unique
  nombre              String
  apellido            String
  documento_identidad String?
  tipo_parentesco     padre_tipo_parentesco
  direccion           String?
  profesion           String?
  lugar_trabajo       String?
  telefono_fijo       String?
  telefono_movil      String?
  email               String?
  fecha_de_nacimiento DateTime?
  genero              genero?
  activo              Boolean?              @default(true)
  fecha_creacion      DateTime              @default(now())
  fecha_actualizacion DateTime              @updatedAt // <-- CORRECCIÓN
  alumnos             alumno[]
}

model alumno {
  id                      Int                    @id @default(autoincrement())
  idusuario               String?                @unique
  nombre                  String
  apellido                String
  lugar_de_nacimiento     String
  fecha_de_nacimiento     DateTime
  direccion               String?
  telefono_fijo           String?
  telefono_movil          String?
  institucion_procedencia String
  recibio_evaluacion      Boolean?               @default(false)
  atencion_grupal         Boolean?               @default(false)
  atencion_individual     Boolean?               @default(false)
  atencion_distancia      Boolean?               @default(false)
  atencion_pre_vocacional Boolean?               @default(false)
  atencion_vocacional     Boolean?               @default(false)
  terapia_domicilio       Boolean?               @default(false)
  inclusion_escolar       Boolean?               @default(false)
  educacion_fisica        Boolean?               @default(false)
  usa_medicamentos        Boolean?               @default(false)
  medicamentos_detalle    String?
  alergias                Boolean?               @default(false)
  alergias_detalle        String?
  observaciones_medicas   String?
  genero                  genero
  documento_identidad     String?
  estado                  alumno_estado?         @default(activo)
  jornada_actual          alumno_jornada_actual? @default(matutina)
  fecha_evaluacion        DateTime?
  fecha_creacion          DateTime               @default(now())
  fecha_actualizacion     DateTime               @updatedAt // <-- CORRECCIÓN
  padreId                 Int?
  padre                   padre?                 @relation(fields: [padreId], references: [id])
  terapeutaPrincipalId    Int?
  terapeutaPrincipal      maestro?               @relation("TerapeutaPrincipal", fields: [terapeutaPrincipalId], references: [id])
  materias                Materia[]
  asistencias             attendance[]
  reportes                Reporte[]
}

model eventos {
  id                       Int                 @id @default(autoincrement())
  titulo                   String
  descripcion              String?
  tipo_evento              eventos_tipo_evento
  fecha_inicio             DateTime
  fecha_fin                DateTime
  lugar                    String?
  estado                   eventos_estado?     @default(planificado)
  es_publico               Boolean?            @default(true)
  observaciones            String?
  creado_por_admin_id      Int?
  actualizado_por_admin_id Int?
  fecha_creacion           DateTime            @default(now())
  fecha_actualizacion      DateTime            @updatedAt // <-- CORRECCIÓN
}

model Materia {
  id          String   @id @default(uuid())
  nombre      String
  descripcion String?
  estado      materia_estado? @default(activa)

  maestroId Int
  maestro   maestro @relation(fields: [maestroId], references: [id])

  alumnos alumno[]

  @@map("materias")
}

model attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  
  alumnoId Int
  alumno   alumno  @relation(fields: [alumnoId], references: [id])

  @@map("asistencias")
}

model Reporte {
  id                  Int           @id @default(autoincrement())
  fecha_entrega       DateTime      @default(now())
  resumen             String?
  conclusiones        String?
  recomendaciones     String?
  alumnoId            Int
  alumno              alumno        @relation(fields: [alumnoId], references: [id])
  licenciadoId        Int
  licenciado          maestro       @relation(fields: [licenciadoId], references: [id])
  itemsDeEvaluacion   ReporteItem[]
  fecha_creacion      DateTime      @default(now())
  fecha_actualizacion DateTime      @updatedAt

  @@map("reportes")
}

model ReporteItem {
  id          Int     @id @default(autoincrement())
  area        String
  actividad   String
  valoracion  String
  
  reporteId   Int
  reporte     Reporte @relation(fields: [reporteId], references: [id])

  @@map("reporte_items")
}

// --- ENUMS ---
enum admin_estado { 
  activo 
  inactivo 
  suspendido 
}

enum genero { 
  masculino 
  femenino 
}
enum eventos_tipo_evento { 
  reunion_padres 
  capacitacion_maestros 
  evaluacion_grupal 
  actividad_recreativa 
  conferencia 
  taller 
  otro 
}
enum padre_tipo_parentesco { 
  madre 
  padre 
  tutor 
}
enum eventos_estado { 
  planificado 
  confirmado 
  en_progreso 
  completado 
  cancelado 
}
enum maestros_tipo_profesional { 
  psicologo 
  terapeuta 
  ambos 
}
enum alumno_estado { 
  activo 
  inactivo 
  graduado 
  retirado 
}
enum maestros_estado { 
  activo 
  inactivo 
  vacaciones 
}
enum alumno_jornada_actual { 
  matutina 
  vespertina 
}
enum materia_estado {
  activa
  inactiva
}